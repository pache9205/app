prueba

USE [Robot_Backend_SQL]

GO

/****** Object:  StoredProcedure [dbo].[VALIDAR_TABLAS]    Script Date: 01/09/2018 16:54:57 ******/

SET ANSI_NULLS ON

GO

SET QUOTED_IDENTIFIER ON

GO

/****** 

/Procedimiento almacenado encargado de hacer la validacion de las tablas

/ seleccionando los valores que no coinciden, los valores que estan en T y no en T2

/ los valores que estan en T2 y no estan en T1. 

/ El resultado lo inserta en la tabla dbo.CHC_LOGS_VALIDACION

/ Contar los errores encontrados por cada caso

/ En la tabla dbo.CHC_CASES actualiza el estado = 1 y el numero de errores encontrados

/ Creago por Gustavo Vargas Avila

/ Automatizador CHOUCAIR TESTING

/ 20-03-2015

******/

ALTER PROCEDURE [dbo].[VALIDAR_TABLAS]

      @Tabla_Uno VARCHAR(200)

    , @Tabla_Dos VARCHAR(200)

    , @CampoT1 VARCHAR(200)

    , @CampoT2 VARCHAR(200)

    , @LlaveT1 VARCHAR(200)

    , @LlaveT2 VARCHAR(200)

    , @IdSearch INT

    , @numCaso INT

    , @Esquema VARCHAR(200)

    , @NumCorrida INT

    , @TypeData VARCHAR(200)

    , @DefaultValue VARCHAR(200)

    , @OutFlag INT OUTPUT

AS 

DECLARE

        @cont     INT,

        @strQuery VARCHAR(4000),

        @l_DefaultValue VARCHAR(4000),

        @valida INT,

        @Error1 INT,

        @Error2 INT,

        @Error3 INT       

        

BEGIN

      SET @OutFlag = 0

      SET @valida = 0

      SET @Error1 = 0

      SET @Error2 = 0   

      SET @Error3 = 0

            BEGIN TRY 

            BEGIN TRAN MiT

            IF @IdSearch = 1

            BEGIN

                  set @strQuery = ''

                  

                  IF(@TypeData = 'Number')

                  BEGIN

                  --CASE @TypeData

                  --WHEN 'Number' THEN

                        IF @DefaultValue IS NULL

                             SET @l_DefaultValue = '999999';

                        ELSE

                             SET @l_DefaultValue = @DefaultValue;

                        SET @strQuery =         

                        'SELECT 

                        K, 

                        CAMPO1, 

                        CAMPO2,

                        ''NO COINCIDE'' AS RES, ' +

                        CAST(@numCaso AS VARCHAR(5)) + ' AS CASO, 

                        GETDATE() FECHA, ' +

                        CAST(@NumCorrida AS VARCHAR(5)) + ' 

                        FROM(

                                   SELECT A.'  + @LlaveT1 + ' AS K,

                                         CASE WHEN A.' + @CampoT1 + ' IS NULL THEN ' + @l_DefaultValue + ' ELSE A.' + @CampoT1 + ' END AS CAMPO1,

                                         CASE WHEN B.' + @CampoT2 + ' IS NULL THEN ' + @l_DefaultValue + ' ELSE B.' + @CampoT2 + ' END AS CAMPO2

                                         FROM ' + @Esquema + '.' + @Tabla_Uno + ' A, ' + @Tabla_Dos + ' B 

                                   WHERE A.' + @LlaveT1 + ' = B.' + @LlaveT2 + '

                        ) T

                        WHERE T.CAMPO1 <> T.CAMPO2

                        GROUP BY K, CAMPO1, CAMPO2';

                        INSERT INTO dbo.CHC_LOGS_VALIDACION

                        (

                                [key]

                             , Valor_Campo_Tabla_Orig

                             , Valor_Campo_Tabla_Dest

                             , Resultado

                             , id_Caso

                             , Fecha_ejecuacion

                             , Num_Corrida

                        )

                        EXEC(@strQuery)   

                        SELECT @Error1 = @@ERROR     

                  END   

                  

                  IF(@TypeData = 'String')

                  BEGIN

                  PRINT '->String<-'

                  --WHEN 'String' THEN

                        SET @strQuery =         

                        'SELECT 

                        K, 

                        CAMPO1, 

                        CAMPO2,

                        ''NO COINCIDE'' AS RES, ' +

                        CAST(@numCaso AS VARCHAR(5)) + ' AS CASO, 

                        GETDATE() FECHA, ' +

                        CAST(@NumCorrida AS VARCHAR(5)) + ' 

                        FROM(

                                   SELECT A.'  + @LlaveT1 + ' AS K,

                                         CASE WHEN A.' + @CampoT1 + ' IS NULL THEN ''NULL'' ELSE A.' + @CampoT1 + ' END AS CAMPO1,

                                         CASE WHEN B.' + @CampoT2 + ' IS NULL THEN ''NULL'' ELSE B.' + @CampoT2 + '  END AS CAMPO2

                                         FROM ' + @Esquema + '.' + @Tabla_Uno + ' A, ' + @Tabla_Dos + ' B 

                                   WHERE A.' + @LlaveT1 + ' = B.' + @LlaveT2 + '

                        ) T

                        WHERE T.CAMPO1 <> T.CAMPO2

                        GROUP BY K, CAMPO1, CAMPO2';

                        PRINT @strQuery

                        INSERT INTO dbo.CHC_LOGS_VALIDACION

                        (

                           [key]

                        , Valor_Campo_Tabla_Orig 

                         , Valor_Campo_Tabla_Dest

                        , Resultado

                        , id_Caso

                        , Fecha_ejecuacion

                        , Num_Corrida

                        )

                        EXEC(@strQuery)   

                        SELECT @Error1 = @@ERROR                 

                  END

                  

                  

                  -----------------------

                  IF(@TypeData = 'Date')

                  BEGIN

                  --@DefaultValue, debe contener el codigo del formato de la fecha que se va a validar, 

                  --SI es diferente al que tiene la funcion CONVERT 

                  --se debe reemplazar "01/01/1500" por el formato requerido conservando la MISMA fecha {01-01-1500, 01011500}

                        SET @strQuery =         

                        'SELECT 

                        K, 

                        CAMPO1, 

                        CAMPO2,

                        ''NO COINCIDE'' AS RES, ' +

                        CAST(@numCaso AS VARCHAR(5)) + ' AS CASO, 

                        GETDATE() FECHA, ' +

                        CAST(@NumCorrida AS VARCHAR(5)) + ' 

                        FROM(

                                   SELECT A.'  + @LlaveT1 + ' AS K,

                                         CASE WHEN A.' + @CampoT1 + ' IS NULL THEN CONVERT(DATE,     ''01/01/1500'', ''' + @DefaultValue + ''') ELSE A.' + @CampoT1 + ' END AS CAMPO1,

                                         CASE WHEN B.' + @CampoT2 + ' IS NULL THEN CONVERT(DATE,     ''01/01/1500'', ''' + @DefaultValue + ''') ELSE B.' + @CampoT2 + ' END AS CAMPO2

                                         FROM ' + @Esquema + '.' + @Tabla_Uno + ' A, ' + @Tabla_Dos + ' B 

                                   WHERE A.' + @LlaveT1 + ' = B.' + @LlaveT2 + '

                        ) T

                        WHERE T.CAMPO1 <> T.CAMPO2

                        GROUP BY K, CAMPO1, CAMPO2';

                        INSERT INTO dbo.CHC_LOGS_VALIDACION

                        (

                           [key]

                        , Valor_Campo_Tabla_Orig 

                         , Valor_Campo_Tabla_Dest

                        , Resultado

                        , id_Caso

                        , Fecha_ejecuacion

                        , Num_Corrida

                        )

                        EXEC(@strQuery)   

                        SELECT @Error1 = @@ERROR                 

                  END

                  

                  -----------------------

                  

            END

            

            IF    @IdSearch = 2

                  BEGIN

                        SET @strQuery = 'SELECT A.' + @LlaveT1 + ' K, ''No existe en T2'' C1, ''NULL'' C2, ''No existe'' RES, '+ CAST(@numCaso AS VARCHAR(5)) + ' CASO , GETDATE() FECHA, ' +

                        CAST(@NumCorrida AS VARCHAR(5)) + ' FROM ' + @Esquema + '.' + @Tabla_Uno + ' A LEFT JOIN ' + @Tabla_Dos + ' B ON A.' + @LlaveT1 + ' = B.' + @LlaveT2 + ' WHERE B.' + @LlaveT2 + ' IS NULL';

                        PRINT(@strQuery)

                        INSERT INTO dbo.CHC_LOGS_VALIDACION

                        (

                           [KEY]

                        , Valor_Campo_Tabla_Orig

                        , Valor_Campo_Tabla_Dest

                        , Resultado

                        , id_Caso

                        , Fecha_ejecuacion

                        , Num_Corrida                     

                        )

                        EXEC(@strQuery)   

                        SELECT @Error2 = @@ERROR

                        PRINT 'Busq2'

                  END

            IF    @IdSearch = 3

                  BEGIN

                        SET @strQuery = 'SELECT B.' + @LlaveT2 + ' K, ''No existe en T1'' C1, ''NULL'' C2, ''No existe'' RES, ' + CAST(@numCaso AS VARCHAR(5)) + ' CASO, GETDATE() FECHA, ' +

                        CAST(@NumCorrida AS VARCHAR(5)) + ' FROM ' + @Esquema + '.' + @Tabla_Dos + ' B LEFT JOIN ' + @Tabla_Uno + ' A ON B.' + @LlaveT2 + ' = A.' + @LlaveT1 + ' WHERE A.' + @LlaveT1 + ' IS NULL';

                        PRINT(@strQuery)

                        INSERT INTO dbo.CHC_LOGS_VALIDACION

                        (

                           [KEY]

                        , Valor_Campo_Tabla_Orig

                        , Valor_Campo_Tabla_Dest

                        , Resultado

                        , id_Caso

                        , Fecha_ejecuacion

                        , Num_Corrida                     

                        )

                        EXEC(@strQuery)

                        SELECT @Error3 = @@ERROR

                        PRINT 'Busq3'                      

                  END

            IF @Error1 + @Error2 + @Error3 = 0

                  BEGIN

                        COMMIT TRAN MiT

                  END

            ELSE

                  BEGIN

                        ROLLBACK TRAN MiT

                        SET @valida = 1

                  END   

                  IF @valida = 0               

                        BEGIN

                          SELECT @cont = COUNT(1) FROM dbo.CHC_LOGS_VALIDACION S

                          WHERE S.Id_Caso = @numCaso AND S.Num_Corrida = @NumCorrida;

                          PRINT '->Count<-'

                          

                          UPDATE dbo.CHC_CASES

                          SET Estado = 1, Num_Error = @cont

                          WHERE Id_Caso = @numCaso;

                          SET @OutFlag = 1                       

                          PRINT '->Update<-'

                        END               

      END TRY

      BEGIN CATCH

            PRINT '->Catch<-'

            PRINT ERROR_MESSAGE()

      END CATCH

END

 

 

 


 

 
